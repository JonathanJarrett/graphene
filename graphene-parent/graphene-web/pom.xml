<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<artifactId>graphene-parent</artifactId>
		<groupId>graphene</groupId>
		<version>4.0.8-SNAPSHOT</version>
	</parent>
	<artifactId>graphene-web</artifactId>
	<name>${project.artifactId}</name>
	<dependencies>
		<dependency>
			<artifactId>graphene-model</artifactId>
			<groupId>${project.groupId}</groupId>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>graphene-dao</artifactId>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>graphene-search</artifactId>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>graphene-util</artifactId>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>graphene-dao-sql</artifactId>
		</dependency>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>graphene-dao-neo4j</artifactId>
		</dependency>
		<dependency>
			<groupId>org.tynamo</groupId>
			<artifactId>tapestry-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.apache.tapestry</groupId>
			<artifactId>tapestry-core</artifactId>
		</dependency>
		<!-- <dependency> <groupId>org.apache.tapestry</groupId> <artifactId>tapestry-test</artifactId> 
			<scope>test</scope> </dependency> -->
		<!-- <dependency> <groupId>org.got5</groupId> <artifactId>tapestry5-jquery</artifactId> 
			</dependency> -->
		<!-- This adds automatic compression of JavaScript and CSS when in production 
			mode. -->
		<!-- <dependency> <groupId>org.apache.tapestry</groupId> <artifactId>tapestry-yuicompressor</artifactId> 
			<version>${tapestry-release-version}</version> </dependency> -->
		<!-- This gets us the @exclude annotation for css and js -->
		<!-- <dependency> <groupId>com.trsvax</groupId> <artifactId>tapestry-bootstrap</artifactId> 
			<version>2.1.3</version> <exclusions> <exclusion> <groupId>org.apache.tapestry</groupId> 
			<artifactId>tapestry-yuicompressor</artifactId> </exclusion> </exclusions> 
			</dependency> -->

		<!-- We will switch to this newer version later. Note it has a more correct 
			group id. -->
		<!-- <dependency> <groupId>com.trsvax</groupId> <artifactId>tapestry-bootstrap</artifactId> 
			</dependency> -->

		<dependency>
			<groupId>org.apache.avro</groupId>
			<artifactId>avro</artifactId>
		</dependency>
		<!-- <dependency> <groupId>org.apache.avro</groupId> <artifactId>avro-ipc</artifactId> 
			</dependency> -->
		<!-- We'll eventually stop using the version with this group id, or go 
			to T5.4, which will eliminate the need for this. -->
		<dependency>
			<groupId>com.trsvax.bootstrap</groupId>
			<artifactId>tapestry-bootstrap</artifactId>
			<exclusions>
				<exclusion>
					<artifactId>tapestry-yuicompressor</artifactId>
					<groupId>org.apache.tapestry</groupId>
				</exclusion>
			</exclusions>
		</dependency>
		<!-- <dependency> <groupId>com.yahoo.platform.yui</groupId> <artifactId>yuicompressor</artifactId> 
			</dependency> -->
		<!-- Testing -->
		<!-- A dependency on either JUnit or TestNG is required, or the surefire 
			plugin (which runs the tests) will fail, preventing Maven from packaging 
			the WAR. Tapestry includes a large number of testing facilities designed 
			for use with TestNG (http://testng.org/), so it's recommended. -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<scope>provided</scope>
		</dependency>
		<!-- end Testing -->
	</dependencies>
	<build>
		<finalName>graphene-web</finalName>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
			<resource>
				<directory>src/test/conf</directory>
				<filtering>true</filtering>
				<targetPath>${basedir}/target/test-classes/</targetPath>
			</resource>
			<!-- <resource> <directory>src/main/webapp</directory> </resource> -->
			<resource>
				<directory>src/main/filtered-resources</directory>
				<filtering>true</filtering>
			</resource>
			<!-- <resource> <directory>META-INF</directory> </resource> -->
		</resources>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<configuration>
					<systemPropertyVariables>
						<tapestry.execution-mode>Qa</tapestry.execution-mode>
					</systemPropertyVariables>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<inherited>true</inherited>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
						<manifestEntries>
							<Tapestry-Module-Classes>graphene.web.services.AppModule
							</Tapestry-Module-Classes>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<!-- This changes the WAR file packaging so that what would normally go 
				into WEB-INF/classes is instead packaged as WEB-INF/lib/something.jar. This 
				is necessary for Tapestry to be able to search for page and component classes 
				at startup. Only certain application servers require this configuration, 
				please see the documentation at the Tapestry 5 project page (http://tapestry.apache.org/tapestry5/). -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<configuration>
					<!-- <archive> <manifest> <addDefaultImplementationEntries>true</addDefaultImplementationEntries> 
						<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries> </manifest> 
						</archive> -->
					<webXml>src\main\webapp\WEB-INF\web.xml</webXml>
					<!-- If true, this will package the classes as their own jar, INSIDE 
						the war's web-inf/lib. At the moment this seems incompatible with the attachClasses 
						flag, which we absolutely need for building. -->
					<archiveClasses>false</archiveClasses>
					<attachClasses>true</attachClasses>
					<!-- Just to be explicit. 'classes' is the default. This makes a second 
						target as a jar with just the classes and no html/js -->
					<classesClassifier>classes</classesClassifier>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<description>A dual purpose module that acts as most of a baseline web application as well as the main overlay for customer web applications.</description>
	<packaging>war</packaging>
</project>
